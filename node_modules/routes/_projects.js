/**
 * Created by skitsanos on 18/10/2014.
 */
var url = require('url');
var moment = require('moment');

var _projects = function (request, response, app) {
    var urlParts = url.parse(request.url, true);
    var urlPath = urlParts.pathname.split('/');

    switch (request.method) {
        case 'GET': //get projects
            if (urlPath[1] == '_projects') //make sure we are processing /_projects end point only
            {
                app.api.redis.keys('projects.*', function (err, result) {
                    console.log(arguments);
                    if (err == null) {
                        var arr = [];
                        for (var i = 0; i < result.length; i++) {
                            arr.push(result[i].replaceAll('projects.', ''));
                        }
                        app.utils.serveJson('result', arr.sort());
                    }
                    else {
                        app.utils.serveJson('error', err);
                    }
                });
            }
            else {
                app.utils.serveJson('error', 'Not supported');
            }
            break;

        case 'PUT':  //add project
            app.utils.parseRequestBody(function (result) {
                var doc = app.utils.parseJSON(result);
                if (doc == null) {
                    app.utils.serveJson('error', 'Incorrect JSON data');
                }
                else {
                    if (doc.name == undefined) {
                        app.utils.serveJson('error', '{name} parameter is missing');
                    }
                    else {
                        if (doc.name.startsWith('_')) {
                            app.utils.serveJson('error', '{name} cannot start with underscore character (_)');
                        }
                        else {
                            //now when all checks done, final check is to see if we have a project in our data store
                            app.api.redis.hget('projects.' + doc.name, 'createdBy', function (e, r) {
                                if (r != null) {
                                    app.utils.serveJson('error', 'Project {' + doc.name + '} already exists');
                                }
                                else {
                                    app.api.redis.hset('projects.' + doc.name, 'createdBy', '$api', function (e_set, r_set) {
                                        if (r_set == 1) {
                                            app.utils.serveJson('result', true);
                                            app.api.redis.hset('projects.' + doc.name, 'createdOn', moment().format());
                                        }
                                        else {
                                            app.utils.serveJson('error', false);
                                        }
                                    })
                                }
                            });
                        }
                    }
                }
            });
            break;

        case 'DELETE': //delete project
            if (urlPath[1] == '_projects') {
                app.utils.serveJson('error', 'Not allowed');
            }
            else {
                //now when all checks done, final check is to see if we have a project in our data store
                app.api.redis.hget('projects.' + urlPath[1], 'createdBy', function (e, r) {
                    console.log(r);
                    if (r == null) {
                        app.utils.serveJson('error', 'Project {' + urlPath[1] + '} does not exist.');
                    }
                    else {
                        //drill-down deletion of items, then caches, and then project

                        //delete project
                        console.log('delete project');

                        //get all caches within project
                        //delete caches

                        app.api.redis.keys('caches.' + urlPath[1] + '.*', function (err, result) {
                            if (err == null) {

                                if (result.length >= 0) {

                                    for (var i = 0; i < result.length; i++) {
                                        console.log(result[i]);
                                        app.api.redis.del(result[i], function (e_delc, r_delc) {
                                            console.log("deleting cache " + result[i]);
                                            if (r_delc != 1) {
                                                console.log("error deleting cache " + arguments[0]);
                                            }
                                        });
                                    }
                                }

                                app.api.redis.keys('caches.' + urlPath[1] + '.*', function (err, result) {

                                    if (err == null) {

                                        if (result.length == 0) {
                                            app.api.redis.del('projects.' + urlPath[1], function (e_del, r_del) {
                                                if (r_del == 1) {
                                                    app.utils.serveJson('result', true);
                                                }
                                                else {
                                                    app.utils.serveJson('error', false);
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        });
                    }
                });
            }
            break;

        default:
            app.utils.serveError(405, 'Only GET, PUT and DELETE methods are allowed');
            break;
    }
};
module.exports = _projects;