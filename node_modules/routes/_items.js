/**
 * Created by skitsanos on 18/10/2014.
 */

var url = require('url');
var moment = require('moment');

var _items = function (request, response, app) {
    var urlParts = url.parse(request.url, true);
    var urlPath = urlParts.pathname.split('/');

    var projectId = urlPath[1];
    var cacheId = urlPath[2];
    var itemId = urlPath[3];

    //console.log('caches.' + projectId + '.' + cacheId + '.*');

    switch (request.method) {
        case 'GET':
            switch (itemId) {
                case '_items':
                    //get list of items
                    app.api.redis.hget('projects.' + projectId, 'createdBy', function (e, r) {

                        if (r != null) {
                            app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_c, r_c) {
                                if (r_c != null) {
                                    app.api.redis.hkeys('caches.' + projectId + '.' + cacheId, function (err, result) {
                                        if (err == null) {
                                            var arr = [];
                                            for (var i = 0; i < result.length; i++) {
                                                if (result[i] != 'createdBy' && result[i] != 'createdOn')
                                                    arr.push(result[i]);
                                            }
                                            app.utils.serveJson('result', arr.sort());
                                        }
                                        else {
                                            app.utils.serveJson('error', err);
                                        }
                                    });
                                }
                                else {
                                    app.utils.serveJson('error', 'Cache {' + cacheId + '} does not exist');
                                }

                            });
                        }
                        else {
                            app.utils.serveJson('error', 'Project {' + projectId + '} does not exist');
                        }
                    });

                    break;

                case '_details': //project details
                    app.api.redis.hget('projects.' + projectId, 'createdBy', function (e, r) {

                        if (r != null) {
                            app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_c, r_c) {
                                if (r_c != null) {
                                    app.api.redis.hlen('caches.' + projectId + '.' + cacheId, function (e_hlen, r_hlen) {
                                        if (!e_hlen) {
                                            app.utils.serveJson('result', {items: r_hlen == 0 ? r_hlen : r_hlen - 2});
                                        }
                                        else {
                                            app.utils.serveJson('result', {items: 0});
                                        }
                                    });
                                }
                                else {
                                    app.utils.serveJson('error', 'Cache {' + cacheId + '} does not exist');
                                }

                            });
                        }
                        else {
                            app.utils.serveJson('error', 'Project {' + projectId + '} does not exist');
                        }
                    });
                    break;

                default:
                    app.api.redis.hget('projects.' + projectId, 'createdBy', function (e, r) {

                        if (r != null) {
                            app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_c, r_c) {
                                if (r_c != null) {
                                    app.api.redis.hget('caches.' + projectId + '.' + cacheId, itemId, function (e_items, r_items) {

                                        if(r_items == null)
                                        {
                                            app.utils.serveJson('error', 'Item {' + urlPath[3] + '} does not exist');
                                        }
                                        else {
                                            app.utils.serveJson('result', r_items);
                                        }
                                    });
                                }
                                else {
                                    app.utils.serveJson('error', 'Cache {' + cacheId + '} does not exist');
                                }

                            });
                        }
                        else {
                            app.utils.serveJson('error', 'Project {' + projectId + '} does not exist');
                        }
                    });
                    break;
            }
            break;

        case 'PUT':  //add item
            app.utils.parseRequestBody(function (result) {
                var doc = app.utils.parseJSON(result);
                if (doc == null) {
                    app.utils.serveJson('error', 'Incorrect JSON data');
                }
                else {
                    if (doc.name == undefined) {
                        app.utils.serveJson('error', '{name} parameter is missing');
                    }
                    else {
                        if (doc.name.startsWith('_')) {
                            app.utils.serveJson('error', '{name} cannot start with underscore character (_)');
                        }
                        else {
                            if (doc.value == undefined) {
                                app.utils.serveJson('error', '{value} parameter is missing');
                            }
                            else {
                                //check if project exists
                                app.api.redis.hget('projects.' + projectId, 'createdBy', function (e, r) {
                                    if (r == null) {
                                        app.utils.serveJson('error', 'Project {' + projectId + '} does not exist');
                                    }
                                    else {
                                        app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_caches, r_caches) {
                                            if (r_caches == null) {
                                                app.utils.serveJson('error', 'Cache {' + cacheId + '} does not exist');
                                            }
                                            else {
                                                //now when all checks done, final check is to see if we have a item in our data store
                                                app.api.redis.hget('caches.' + projectId + '.' + cacheId, doc.name, function (e_items, r_items) {
                                                    if (r_items != null) {
                                                        if (doc.overwrite == undefined || doc.overwrite == false) {
                                                            app.utils.serveJson('error', 'Item {' + doc.name + '} already exists');
                                                            return;
                                                        }
                                                    }

                                                    app.api.redis.hset('caches.' + projectId + '.' + cacheId, doc.name, doc.value, function (e_set, r_set) {
                                                        console.log(r_set);

                                                        if (e_set == null) {
                                                            app.utils.serveJson('result', true);
                                                        }
                                                        else {
                                                            app.utils.serveJson('error', e_set.message);
                                                        }
                                                    });
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    }
                }
            });
            break;

        case 'POST'://increment values

            if (urlPath[1] == '_projects') {
                app.utils.serveJson('error', 'Not allowed');
            }
            else {
                app.api.redis.hget('projects.' + urlPath[1], 'createdBy', function (e, r) {

                    if (r == null) {
                        app.utils.serveJson('error', 'Project {' + urlPath[1] + '} does not exist');
                    }
                    else {
                        app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_c, r_c) {
                            if (r_c == null) {
                                app.utils.serveJson('error', 'Cache {' + urlPath[2] + '} does not exist');
                            }
                            else {

                                app.api.redis.hget('caches.' + projectId + '.' + cacheId, itemId, function (e_i, r_i) {
                                    if (r_i == null) {
                                        app.utils.serveJson('error', 'Item {' + urlPath[3] + '} does not exist');
                                    }
                                    else {

                                        app.utils.parseRequestBody(function (result) {
                                            var doc = app.utils.parseJSON(result);
                                            if (doc == null) {
                                                app.utils.serveJson('error', 'Incorrect JSON data');
                                            }
                                            else {

                                                if (doc.increment == undefined) {
                                                    app.utils.serveJson('error', '{increment} parameter is missing');
                                                }

                                                //increase value
                                                app.api.redis.hincrby('caches.' + projectId + '.' + cacheId, itemId, doc.increment, function (e_set, r_set) {

                                                    if (e_set == null) {
                                                        app.utils.serveJson('result', r_set);
                                                    }
                                                    else {
                                                        app.utils.serveJson('error', e_set.message);
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });

            }
            break;

        case'DELETE': //delete project
            if (urlPath[1] == '_projects') {
                app.utils.serveJson('error', 'Not allowed');
            }
            else {
                //now when all checks done, final check is to see if we have a project in our data store
                app.api.redis.hget('projects.' + urlPath[1], 'createdBy', function (e, r) {

                    if (r == null) {
                        app.utils.serveJson('error', 'Project {' + urlPath[1] + '} does not exist');
                    }
                    else {
                        //drill-down deletion of items, then caches, and then project

                        app.api.redis.hget('caches.' + projectId + '.' + cacheId, 'createdBy', function (e_c, r_c) {
                            if (r_c == null) {
                                app.utils.serveJson('error', 'Cache {' + urlPath[2] + '} does not exist');
                            }
                            else {
                                app.api.redis.hget('caches.' + projectId + '.' + cacheId, itemId, function (e_i, r_i) {
                                    if (r_i == null) {
                                        app.utils.serveJson('error', 'Item {' + urlPath[3] + '} does not exist');
                                    }
                                    else {

                                        //delete item
                                        app.api.redis.hdel('caches.' + projectId + '.' + cacheId, itemId, function (e_set, r_set) {
                                            if (r_set == 1) {
                                                app.utils.serveJson('result', true);
                                            }
                                            else {
                                                app.utils.serveJson('error', false);
                                            }
                                        });
                                    }
                                });
                            }
                        });

                    }
                });
            }
            break;

        default:
            app.utils.serveError(405, 'Only GET, PUT and DELETE methods are allowed');
            break;
    }
};
module.exports = _items;